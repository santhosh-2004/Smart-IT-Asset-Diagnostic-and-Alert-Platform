{"ast":null,"code":"import { differenceInDays, parseISO } from 'date-fns';\n\n// Calculate PC status based on last reboot time\nexport const getPCStatus = lastReboot => {\n  const rebootDate = parseISO(lastReboot);\n  const daysSinceReboot = differenceInDays(new Date(), rebootDate);\n  if (daysSinceReboot <= 1) {\n    return {\n      status: 'green',\n      label: 'OK',\n      days: daysSinceReboot\n    };\n  } else if (daysSinceReboot <= 3) {\n    return {\n      status: 'green',\n      label: 'OK',\n      days: daysSinceReboot\n    };\n  } else if (daysSinceReboot <= 7) {\n    return {\n      status: 'yellow',\n      label: 'Reboot Due',\n      days: daysSinceReboot\n    };\n  } else if (daysSinceReboot < 10) {\n    return {\n      status: 'yellow',\n      label: 'Reboot Due',\n      days: daysSinceReboot\n    };\n  } else {\n    return {\n      status: 'red',\n      label: 'Critical',\n      days: daysSinceReboot\n    };\n  }\n};\n\n// Utility: Should alert if days since reboot >= 8 and < 10, returns days left\nexport const shouldAlertReboot = lastReboot => {\n  const rebootDate = parseISO(lastReboot);\n  const daysSinceReboot = differenceInDays(new Date(), rebootDate);\n  if (daysSinceReboot >= 8 && daysSinceReboot < 10) {\n    return 10 - daysSinceReboot;\n  }\n  return null;\n};\n\n// Get status color class\nexport const getStatusColorClass = status => {\n  switch (status) {\n    case 'green':\n      return 'status-green';\n    case 'yellow':\n      return 'status-yellow';\n    case 'red':\n      return 'status-red';\n    default:\n      return 'status-green';\n  }\n};\n\n// Format date for display\nexport const formatDate = dateString => {\n  const date = parseISO(dateString);\n  return date.toLocaleString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\n// Sort PCs by various criteria\nexport const sortPCs = (pcs, sortBy, sortOrder) => {\n  return [...pcs].sort((a, b) => {\n    let aValue, bValue;\n    switch (sortBy) {\n      case 'ipAddress':\n        aValue = a.ipAddress;\n        bValue = b.ipAddress;\n        break;\n      case 'lastReboot':\n        aValue = new Date(a.lastReboot);\n        bValue = new Date(b.lastReboot);\n        break;\n      case 'name':\n        aValue = a.name;\n        bValue = b.name;\n        break;\n      case 'status':\n        const aStatus = getPCStatus(a.lastReboot);\n        const bStatus = getPCStatus(b.lastReboot);\n        aValue = aStatus.status;\n        bValue = bStatus.status;\n        break;\n      default:\n        aValue = a[sortBy];\n        bValue = b[sortBy];\n    }\n    if (sortOrder === 'asc') {\n      return aValue > bValue ? 1 : -1;\n    } else {\n      return aValue < bValue ? 1 : -1;\n    }\n  });\n};","map":{"version":3,"names":["differenceInDays","parseISO","getPCStatus","lastReboot","rebootDate","daysSinceReboot","Date","status","label","days","shouldAlertReboot","getStatusColorClass","formatDate","dateString","date","toLocaleString","year","month","day","hour","minute","sortPCs","pcs","sortBy","sortOrder","sort","a","b","aValue","bValue","ipAddress","name","aStatus","bStatus"],"sources":["C:/Users/dines/OneDrive/Desktop/Schneider/Schneider/src/utils/statusUtils.js"],"sourcesContent":["import { differenceInDays, parseISO } from 'date-fns';\r\n\r\n// Calculate PC status based on last reboot time\r\nexport const getPCStatus = (lastReboot) => {\r\n  const rebootDate = parseISO(lastReboot);\r\n  const daysSinceReboot = differenceInDays(new Date(), rebootDate);\r\n  \r\n  if (daysSinceReboot <= 1) {\r\n    return { status: 'green', label: 'OK', days: daysSinceReboot };\r\n  } else if (daysSinceReboot <= 3) {\r\n    return { status: 'green', label: 'OK', days: daysSinceReboot };\r\n  } else if (daysSinceReboot <= 7) {\r\n    return { status: 'yellow', label: 'Reboot Due', days: daysSinceReboot };\r\n  } else if (daysSinceReboot < 10) {\r\n    return { status: 'yellow', label: 'Reboot Due', days: daysSinceReboot };\r\n  } else {\r\n    return { status: 'red', label: 'Critical', days: daysSinceReboot };\r\n  }\r\n};\r\n\r\n// Utility: Should alert if days since reboot >= 8 and < 10, returns days left\r\nexport const shouldAlertReboot = (lastReboot) => {\r\n  const rebootDate = parseISO(lastReboot);\r\n  const daysSinceReboot = differenceInDays(new Date(), rebootDate);\r\n  if (daysSinceReboot >= 8 && daysSinceReboot < 10) {\r\n    return 10 - daysSinceReboot;\r\n  }\r\n  return null;\r\n};\r\n\r\n// Get status color class\r\nexport const getStatusColorClass = (status) => {\r\n  switch (status) {\r\n    case 'green':\r\n      return 'status-green';\r\n    case 'yellow':\r\n      return 'status-yellow';\r\n    case 'red':\r\n      return 'status-red';\r\n    default:\r\n      return 'status-green';\r\n  }\r\n};\r\n\r\n// Format date for display\r\nexport const formatDate = (dateString) => {\r\n  const date = parseISO(dateString);\r\n  return date.toLocaleString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n};\r\n\r\n// Sort PCs by various criteria\r\nexport const sortPCs = (pcs, sortBy, sortOrder) => {\r\n  return [...pcs].sort((a, b) => {\r\n    let aValue, bValue;\r\n    \r\n    switch (sortBy) {\r\n      case 'ipAddress':\r\n        aValue = a.ipAddress;\r\n        bValue = b.ipAddress;\r\n        break;\r\n      case 'lastReboot':\r\n        aValue = new Date(a.lastReboot);\r\n        bValue = new Date(b.lastReboot);\r\n        break;\r\n      case 'name':\r\n        aValue = a.name;\r\n        bValue = b.name;\r\n        break;\r\n      case 'status':\r\n        const aStatus = getPCStatus(a.lastReboot);\r\n        const bStatus = getPCStatus(b.lastReboot);\r\n        aValue = aStatus.status;\r\n        bValue = bStatus.status;\r\n        break;\r\n      default:\r\n        aValue = a[sortBy];\r\n        bValue = b[sortBy];\r\n    }\r\n    \r\n    if (sortOrder === 'asc') {\r\n      return aValue > bValue ? 1 : -1;\r\n    } else {\r\n      return aValue < bValue ? 1 : -1;\r\n    }\r\n  });\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}